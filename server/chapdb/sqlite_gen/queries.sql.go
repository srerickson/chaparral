// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: queries.sql

package sqlite

import (
	"context"
	"time"
)

const countUploaders = `-- name: CountUploaders :one
SELECT COUNT(*) from uploaders
`

func (q *Queries) CountUploaders(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUploaders)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUpload = `-- name: CreateUpload :one
INSERT INTO uploads (
    id, 
    uploader_id,
    size,
    digests
) VALUES (
    ?, ?, ?, ?
) RETURNING id, size, uploader_id, digests
`

type CreateUploadParams struct {
	ID         string
	UploaderID string
	Size       int64
	Digests    []byte
}

func (q *Queries) CreateUpload(ctx context.Context, arg CreateUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, createUpload,
		arg.ID,
		arg.UploaderID,
		arg.Size,
		arg.Digests,
	)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Size,
		&i.UploaderID,
		&i.Digests,
	)
	return i, err
}

const createUploader = `-- name: CreateUploader :one
INSERT INTO uploaders (
    id, 
    root_id,
    user_id,
    algs,
    description,
    created_at
) VALUES (
    ?, ?, ?, ?, ?, ?
) RETURNING id, root_id, user_id, algs, description, created_at
`

type CreateUploaderParams struct {
	ID          string
	RootID      string
	UserID      string
	Algs        string
	Description string
	CreatedAt   time.Time
}

func (q *Queries) CreateUploader(ctx context.Context, arg CreateUploaderParams) (Uploader, error) {
	row := q.db.QueryRowContext(ctx, createUploader,
		arg.ID,
		arg.RootID,
		arg.UserID,
		arg.Algs,
		arg.Description,
		arg.CreatedAt,
	)
	var i Uploader
	err := row.Scan(
		&i.ID,
		&i.RootID,
		&i.UserID,
		&i.Algs,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUploader = `-- name: DeleteUploader :exec
DELETE from uploaders where id = ?
`

func (q *Queries) DeleteUploader(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUploader, id)
	return err
}

const deleteUploads = `-- name: DeleteUploads :exec
DELETE from uploads where uploader_id = ?
`

func (q *Queries) DeleteUploads(ctx context.Context, uploaderID string) error {
	_, err := q.db.ExecContext(ctx, deleteUploads, uploaderID)
	return err
}

const getUploader = `-- name: GetUploader :one
SELECT id, root_id, user_id, algs, description, created_at from uploaders where id = ? LIMIT 1
`

func (q *Queries) GetUploader(ctx context.Context, id string) (Uploader, error) {
	row := q.db.QueryRowContext(ctx, getUploader, id)
	var i Uploader
	err := row.Scan(
		&i.ID,
		&i.RootID,
		&i.UserID,
		&i.Algs,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getUploaderIDs = `-- name: GetUploaderIDs :many
SELECT id from uploaders ORDER BY created_at
`

func (q *Queries) GetUploaderIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUploaderIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUploads = `-- name: GetUploads :many
SELECT id, size, uploader_id, digests from uploads WHERE uploader_id = ?
`

func (q *Queries) GetUploads(ctx context.Context, uploaderID string) ([]Upload, error) {
	rows, err := q.db.QueryContext(ctx, getUploads, uploaderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upload
	for rows.Next() {
		var i Upload
		if err := rows.Scan(
			&i.ID,
			&i.Size,
			&i.UploaderID,
			&i.Digests,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

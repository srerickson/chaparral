// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: queries.sql

package sqlite

import (
	"context"
	"time"
)

const allObjects = `-- name: AllObjects :many
SELECT id, store_id, ocfl_id, path, alg, spec, indexed_at FROM objects WHERE store_id = ? ORDER BY ocfl_id ASC
`

func (q *Queries) AllObjects(ctx context.Context, storeID string) ([]Object, error) {
	rows, err := q.db.QueryContext(ctx, allObjects, storeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.OcflID,
			&i.Path,
			&i.Alg,
			&i.Spec,
			&i.IndexedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const countObjects = `-- name: CountObjects :one
SELECT COUNT(*) FROM objects WHERE store_id = ?
`

func (q *Queries) CountObjects(ctx context.Context, storeID string) (int64, error) {
	row := q.db.QueryRowContext(ctx, countObjects, storeID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUploaders = `-- name: CountUploaders :one
SELECT COUNT(*) FROM uploaders
`

func (q *Queries) CountUploaders(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countUploaders)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createObject = `-- name: CreateObject :one
INSERT INTO objects (
    store_id,
    ocfl_id,
    path,
    spec,
    alg,
    indexed_at
) VALUES (?1, ?2, ?3, ?4, ?5, ?6)
ON CONFLICT(store_id, ocfl_id) DO UPDATE SET
    path=?3,
    spec=?4,
    alg=?5,
    indexed_at=?6
RETURNING id, store_id, ocfl_id, path, alg, spec, indexed_at
`

type CreateObjectParams struct {
	StoreID   string
	OcflID    string
	Path      string
	Spec      string
	Alg       string
	IndexedAt time.Time
}

func (q *Queries) CreateObject(ctx context.Context, arg CreateObjectParams) (Object, error) {
	row := q.db.QueryRowContext(ctx, createObject,
		arg.StoreID,
		arg.OcflID,
		arg.Path,
		arg.Spec,
		arg.Alg,
		arg.IndexedAt,
	)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.OcflID,
		&i.Path,
		&i.Alg,
		&i.Spec,
		&i.IndexedAt,
	)
	return i, err
}

const createObjectContent = `-- name: CreateObjectContent :one
INSERT INTO object_contents (
    object_id,
    digest,
    paths,
    fixity,
    size
) VALUES (?1, ?2, ?3, ?4, ?5)
ON CONFLICT(object_id, digest) DO UPDATE SET
    paths=?3,
    fixity=?4,
    size=?5
RETURNING object_id, digest, paths, fixity, size
`

type CreateObjectContentParams struct {
	ObjectID int64
	Digest   string
	Paths    []byte
	Fixity   []byte
	Size     int64
}

func (q *Queries) CreateObjectContent(ctx context.Context, arg CreateObjectContentParams) (ObjectContent, error) {
	row := q.db.QueryRowContext(ctx, createObjectContent,
		arg.ObjectID,
		arg.Digest,
		arg.Paths,
		arg.Fixity,
		arg.Size,
	)
	var i ObjectContent
	err := row.Scan(
		&i.ObjectID,
		&i.Digest,
		&i.Paths,
		&i.Fixity,
		&i.Size,
	)
	return i, err
}

const createUpload = `-- name: CreateUpload :one
INSERT INTO uploads (
    id, 
    uploader_id,
    size,
    digests
) VALUES (
    ?, ?, ?, ?
) RETURNING id, size, uploader_id, digests
`

type CreateUploadParams struct {
	ID         string
	UploaderID string
	Size       int64
	Digests    []byte
}

func (q *Queries) CreateUpload(ctx context.Context, arg CreateUploadParams) (Upload, error) {
	row := q.db.QueryRowContext(ctx, createUpload,
		arg.ID,
		arg.UploaderID,
		arg.Size,
		arg.Digests,
	)
	var i Upload
	err := row.Scan(
		&i.ID,
		&i.Size,
		&i.UploaderID,
		&i.Digests,
	)
	return i, err
}

const createUploader = `-- name: CreateUploader :one

INSERT INTO uploaders (
    id, 
    user_id,
    algs,
    description,
    created_at
) VALUES (
    ?, ?, ?, ?, ?
) RETURNING id, user_id, algs, description, created_at
`

type CreateUploaderParams struct {
	ID          string
	UserID      string
	Algs        string
	Description string
	CreatedAt   time.Time
}

// Uploaders
func (q *Queries) CreateUploader(ctx context.Context, arg CreateUploaderParams) (Uploader, error) {
	row := q.db.QueryRowContext(ctx, createUploader,
		arg.ID,
		arg.UserID,
		arg.Algs,
		arg.Description,
		arg.CreatedAt,
	)
	var i Uploader
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Algs,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const deleteObject = `-- name: DeleteObject :exec
DELETE FROM objects WHERE store_id = ? AND ocfl_id = ?
`

type DeleteObjectParams struct {
	StoreID string
	OcflID  string
}

func (q *Queries) DeleteObject(ctx context.Context, arg DeleteObjectParams) error {
	_, err := q.db.ExecContext(ctx, deleteObject, arg.StoreID, arg.OcflID)
	return err
}

const deleteObjectContents = `-- name: DeleteObjectContents :exec
DELETE FROM object_contents WHERE object_id IN (
    SELECT id FROM objects WHERE store_id = ? AND ocfl_id = ?
)
`

type DeleteObjectContentsParams struct {
	StoreID string
	OcflID  string
}

func (q *Queries) DeleteObjectContents(ctx context.Context, arg DeleteObjectContentsParams) error {
	_, err := q.db.ExecContext(ctx, deleteObjectContents, arg.StoreID, arg.OcflID)
	return err
}

const deleteOrphanedObjectContents = `-- name: DeleteOrphanedObjectContents :exec
DELETE FROM object_contents WHERE object_id IN (
    SELECT object_contents.object_id
    FROM object_contents
    LEFT JOIN objects
    ON objects.id = object_contents.object_id
    WHERE objects.id is NULL
)
`

func (q *Queries) DeleteOrphanedObjectContents(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOrphanedObjectContents)
	return err
}

const deleteStaleObjects = `-- name: DeleteStaleObjects :exec
DELETE FROM objects WHERE store_id = ? AND indexed_at < ?
`

type DeleteStaleObjectsParams struct {
	StoreID   string
	IndexedAt time.Time
}

func (q *Queries) DeleteStaleObjects(ctx context.Context, arg DeleteStaleObjectsParams) error {
	_, err := q.db.ExecContext(ctx, deleteStaleObjects, arg.StoreID, arg.IndexedAt)
	return err
}

const deleteUploader = `-- name: DeleteUploader :exec
DELETE FROM uploaders WHERE id = ?
`

func (q *Queries) DeleteUploader(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteUploader, id)
	return err
}

const deleteUploads = `-- name: DeleteUploads :exec
DELETE FROM uploads WHERE uploader_id = ?
`

func (q *Queries) DeleteUploads(ctx context.Context, uploaderID string) error {
	_, err := q.db.ExecContext(ctx, deleteUploads, uploaderID)
	return err
}

const getObject = `-- name: GetObject :one

SELECT id, store_id, ocfl_id, path, alg, spec, indexed_at FROM objects WHERE store_id = ? AND ocfl_id = ?
`

type GetObjectParams struct {
	StoreID string
	OcflID  string
}

// Objects / ObjectContents
func (q *Queries) GetObject(ctx context.Context, arg GetObjectParams) (Object, error) {
	row := q.db.QueryRowContext(ctx, getObject, arg.StoreID, arg.OcflID)
	var i Object
	err := row.Scan(
		&i.ID,
		&i.StoreID,
		&i.OcflID,
		&i.Path,
		&i.Alg,
		&i.Spec,
		&i.IndexedAt,
	)
	return i, err
}

const getObjectContent = `-- name: GetObjectContent :one
SELECT object_id, digest, paths, fixity, size FROM object_contents WHERE object_id = ? AND digest = ? LIMIT 1
`

type GetObjectContentParams struct {
	ObjectID int64
	Digest   string
}

func (q *Queries) GetObjectContent(ctx context.Context, arg GetObjectContentParams) (ObjectContent, error) {
	row := q.db.QueryRowContext(ctx, getObjectContent, arg.ObjectID, arg.Digest)
	var i ObjectContent
	err := row.Scan(
		&i.ObjectID,
		&i.Digest,
		&i.Paths,
		&i.Fixity,
		&i.Size,
	)
	return i, err
}

const getObjectContents = `-- name: GetObjectContents :many
SELECT object_id, digest, paths, fixity, size FROM object_contents WHERE object_id = ?
    ORDER BY digest ASC
`

func (q *Queries) GetObjectContents(ctx context.Context, objectID int64) ([]ObjectContent, error) {
	rows, err := q.db.QueryContext(ctx, getObjectContents, objectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ObjectContent
	for rows.Next() {
		var i ObjectContent
		if err := rows.Scan(
			&i.ObjectID,
			&i.Digest,
			&i.Paths,
			&i.Fixity,
			&i.Size,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUploader = `-- name: GetUploader :one
SELECT id, user_id, algs, description, created_at FROM uploaders WHERE id = ? LIMIT 1
`

func (q *Queries) GetUploader(ctx context.Context, id string) (Uploader, error) {
	row := q.db.QueryRowContext(ctx, getUploader, id)
	var i Uploader
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Algs,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getUploaderIDs = `-- name: GetUploaderIDs :many
SELECT id FROM uploaders ORDER BY created_at
`

func (q *Queries) GetUploaderIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getUploaderIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUploads = `-- name: GetUploads :many
SELECT id, size, uploader_id, digests FROM uploads WHERE uploader_id = ?
`

func (q *Queries) GetUploads(ctx context.Context, uploaderID string) ([]Upload, error) {
	rows, err := q.db.QueryContext(ctx, getUploads, uploaderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Upload
	for rows.Next() {
		var i Upload
		if err := rows.Scan(
			&i.ID,
			&i.Size,
			&i.UploaderID,
			&i.Digests,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listObjects = `-- name: ListObjects :many
SELECT id, store_id, ocfl_id, path, alg, spec, indexed_at FROM objects WHERE store_id = ?1 AND ocfl_id > ?2
    ORDER BY ocfl_id ASC LIMIT ?3
`

type ListObjectsParams struct {
	StoreID string
	OcflID  string
	Limit   int64
}

func (q *Queries) ListObjects(ctx context.Context, arg ListObjectsParams) ([]Object, error) {
	rows, err := q.db.QueryContext(ctx, listObjects, arg.StoreID, arg.OcflID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Object
	for rows.Next() {
		var i Object
		if err := rows.Scan(
			&i.ID,
			&i.StoreID,
			&i.OcflID,
			&i.Path,
			&i.Alg,
			&i.Spec,
			&i.IndexedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

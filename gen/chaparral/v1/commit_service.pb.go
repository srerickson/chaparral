// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: chaparral/v1/commit_service.proto

package chaparralv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// storage_root_id is the id of the storage root for the object to create/update
	StorageRootId string `protobuf:"bytes,1,opt,name=storage_root_id,json=storageRootId,proto3" json:"storage_root_id,omitempty"`
	// object_id is the id for the object to create/update
	ObjectId string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
	// version is used to set the expected number for the new version. If set to 0,
	// the HEAD+1 is assumed.
	Version int32 `protobuf:"varint,3,opt,name=version,proto3" json:"version,omitempty"`
	// User information for the commit. The user name and email are saved with
	// the new object version.
	User *User `protobuf:"bytes,4,opt,name=user,proto3" json:"user,omitempty"`
	// Commit message. The message is saved with the new object version.
	Message string `protobuf:"bytes,5,opt,name=message,proto3" json:"message,omitempty"`
	// state is a map of paths to digests using digest_algorithm
	State map[string]string `protobuf:"bytes,6,rep,name=state,proto3" json:"state,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// digest_algorithm is the id for the digest algorithm used in state. It
	// must be 'sha512' or 'sha256'
	DigestAlgorithm string                             `protobuf:"bytes,7,opt,name=digest_algorithm,json=digestAlgorithm,proto3" json:"digest_algorithm,omitempty"`
	ContentSources  []*CommitRequest_ContentSourceItem `protobuf:"bytes,8,rep,name=content_sources,json=contentSources,proto3" json:"content_sources,omitempty"`
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest.ProtoReflect.Descriptor instead.
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{0}
}

func (x *CommitRequest) GetStorageRootId() string {
	if x != nil {
		return x.StorageRootId
	}
	return ""
}

func (x *CommitRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *CommitRequest) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *CommitRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CommitRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommitRequest) GetState() map[string]string {
	if x != nil {
		return x.State
	}
	return nil
}

func (x *CommitRequest) GetDigestAlgorithm() string {
	if x != nil {
		return x.DigestAlgorithm
	}
	return ""
}

func (x *CommitRequest) GetContentSources() []*CommitRequest_ContentSourceItem {
	if x != nil {
		return x.ContentSources
	}
	return nil
}

type CommitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitResponse) ProtoMessage() {}

func (x *CommitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitResponse.ProtoReflect.Descriptor instead.
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{1}
}

// DeleteObjectRequest is used to delete an object and its files.
type DeleteObjectRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageRootId string `protobuf:"bytes,1,opt,name=storage_root_id,json=storageRootId,proto3" json:"storage_root_id,omitempty"`
	ObjectId      string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *DeleteObjectRequest) Reset() {
	*x = DeleteObjectRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectRequest) ProtoMessage() {}

func (x *DeleteObjectRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectRequest.ProtoReflect.Descriptor instead.
func (*DeleteObjectRequest) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteObjectRequest) GetStorageRootId() string {
	if x != nil {
		return x.StorageRootId
	}
	return ""
}

func (x *DeleteObjectRequest) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type DeleteObjectResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteObjectResponse) Reset() {
	*x = DeleteObjectResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteObjectResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteObjectResponse) ProtoMessage() {}

func (x *DeleteObjectResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteObjectResponse.ProtoReflect.Descriptor instead.
func (*DeleteObjectResponse) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{3}
}

// NewUploaderRequest is used to create new uploaders where files can be
// uploaded.
type NewUploaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// a list of digest algorithms use to digest files uploaded to the uploader.
	// The list must include `sha512` or `sha256`.
	DigestAlgorithms []string `protobuf:"bytes,1,rep,name=digest_algorithms,json=digestAlgorithms,proto3" json:"digest_algorithms,omitempty"`
	// An optional uploader description
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *NewUploaderRequest) Reset() {
	*x = NewUploaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUploaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUploaderRequest) ProtoMessage() {}

func (x *NewUploaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUploaderRequest.ProtoReflect.Descriptor instead.
func (*NewUploaderRequest) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{4}
}

func (x *NewUploaderRequest) GetDigestAlgorithms() []string {
	if x != nil {
		return x.DigestAlgorithms
	}
	return nil
}

func (x *NewUploaderRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type NewUploaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploaderId string `protobuf:"bytes,1,opt,name=uploader_id,json=uploaderId,proto3" json:"uploader_id,omitempty"`
	// algorithm used to digest uploaded data
	DigestAlgorithms []string `protobuf:"bytes,2,rep,name=digest_algorithms,json=digestAlgorithms,proto3" json:"digest_algorithms,omitempty"`
	// optional description (may be empty)
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID for user who created uploader (may be empty)
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// timestamp when uploader was created
	Created *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// path for uploading content to the uploader
	UploadPath string `protobuf:"bytes,6,opt,name=upload_path,json=uploadPath,proto3" json:"upload_path,omitempty"`
}

func (x *NewUploaderResponse) Reset() {
	*x = NewUploaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewUploaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewUploaderResponse) ProtoMessage() {}

func (x *NewUploaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewUploaderResponse.ProtoReflect.Descriptor instead.
func (*NewUploaderResponse) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{5}
}

func (x *NewUploaderResponse) GetUploaderId() string {
	if x != nil {
		return x.UploaderId
	}
	return ""
}

func (x *NewUploaderResponse) GetDigestAlgorithms() []string {
	if x != nil {
		return x.DigestAlgorithms
	}
	return nil
}

func (x *NewUploaderResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NewUploaderResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NewUploaderResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *NewUploaderResponse) GetUploadPath() string {
	if x != nil {
		return x.UploadPath
	}
	return ""
}

// GetUploaderRequest is used to access information about an existing uploader
type GetUploaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploaderId string `protobuf:"bytes,1,opt,name=uploader_id,json=uploaderId,proto3" json:"uploader_id,omitempty"`
}

func (x *GetUploaderRequest) Reset() {
	*x = GetUploaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploaderRequest) ProtoMessage() {}

func (x *GetUploaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploaderRequest.ProtoReflect.Descriptor instead.
func (*GetUploaderRequest) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{6}
}

func (x *GetUploaderRequest) GetUploaderId() string {
	if x != nil {
		return x.UploaderId
	}
	return ""
}

// GetUploadResponse represent information about an uploader
type GetUploaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uploader's unique ID
	UploaderId string `protobuf:"bytes,1,opt,name=uploader_id,json=uploaderId,proto3" json:"uploader_id,omitempty"`
	// algorithm used to digest uploaded data
	DigestAlgorithms []string `protobuf:"bytes,2,rep,name=digest_algorithms,json=digestAlgorithms,proto3" json:"digest_algorithms,omitempty"`
	// optional description (may be empty)
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// ID for user who created uploader (may be empty)
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// timestamp when uploader was created
	Created *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created,proto3" json:"created,omitempty"`
	// path for uploading content to the uploader
	UploadPath string `protobuf:"bytes,6,opt,name=upload_path,json=uploadPath,proto3" json:"upload_path,omitempty"`
	// list of uploads in the uploader
	Uploads []*GetUploaderResponse_Upload `protobuf:"bytes,7,rep,name=uploads,proto3" json:"uploads,omitempty"`
}

func (x *GetUploaderResponse) Reset() {
	*x = GetUploaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploaderResponse) ProtoMessage() {}

func (x *GetUploaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploaderResponse.ProtoReflect.Descriptor instead.
func (*GetUploaderResponse) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{7}
}

func (x *GetUploaderResponse) GetUploaderId() string {
	if x != nil {
		return x.UploaderId
	}
	return ""
}

func (x *GetUploaderResponse) GetDigestAlgorithms() []string {
	if x != nil {
		return x.DigestAlgorithms
	}
	return nil
}

func (x *GetUploaderResponse) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *GetUploaderResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetUploaderResponse) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *GetUploaderResponse) GetUploadPath() string {
	if x != nil {
		return x.UploadPath
	}
	return ""
}

func (x *GetUploaderResponse) GetUploads() []*GetUploaderResponse_Upload {
	if x != nil {
		return x.Uploads
	}
	return nil
}

// ListUploaderRequest is used to access a list of uploaders.
type ListUploadersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUploadersRequest) Reset() {
	*x = ListUploadersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUploadersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUploadersRequest) ProtoMessage() {}

func (x *ListUploadersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUploadersRequest.ProtoReflect.Descriptor instead.
func (*ListUploadersRequest) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{8}
}

// ListUploaderResponse includes a list of uploaders
type ListUploadersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uploaders []*ListUploadersResponse_Item `protobuf:"bytes,1,rep,name=uploaders,proto3" json:"uploaders,omitempty"`
}

func (x *ListUploadersResponse) Reset() {
	*x = ListUploadersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUploadersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUploadersResponse) ProtoMessage() {}

func (x *ListUploadersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUploadersResponse.ProtoReflect.Descriptor instead.
func (*ListUploadersResponse) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{9}
}

func (x *ListUploadersResponse) GetUploaders() []*ListUploadersResponse_Item {
	if x != nil {
		return x.Uploaders
	}
	return nil
}

// DeleteUploaderRequest is used to delete an uploader and all its files.
type DeleteUploaderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploaderId string `protobuf:"bytes,1,opt,name=uploader_id,json=uploaderId,proto3" json:"uploader_id,omitempty"`
}

func (x *DeleteUploaderRequest) Reset() {
	*x = DeleteUploaderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUploaderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUploaderRequest) ProtoMessage() {}

func (x *DeleteUploaderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUploaderRequest.ProtoReflect.Descriptor instead.
func (*DeleteUploaderRequest) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteUploaderRequest) GetUploaderId() string {
	if x != nil {
		return x.UploaderId
	}
	return ""
}

type DeleteUploaderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteUploaderResponse) Reset() {
	*x = DeleteUploaderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUploaderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUploaderResponse) ProtoMessage() {}

func (x *DeleteUploaderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUploaderResponse.ProtoReflect.Descriptor instead.
func (*DeleteUploaderResponse) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{11}
}

type CommitRequest_ContentSourceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Item:
	//
	//	*CommitRequest_ContentSourceItem_Uploader
	//	*CommitRequest_ContentSourceItem_Object
	Item isCommitRequest_ContentSourceItem_Item `protobuf_oneof:"item"`
}

func (x *CommitRequest_ContentSourceItem) Reset() {
	*x = CommitRequest_ContentSourceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest_ContentSourceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest_ContentSourceItem) ProtoMessage() {}

func (x *CommitRequest_ContentSourceItem) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest_ContentSourceItem.ProtoReflect.Descriptor instead.
func (*CommitRequest_ContentSourceItem) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{0, 1}
}

func (m *CommitRequest_ContentSourceItem) GetItem() isCommitRequest_ContentSourceItem_Item {
	if m != nil {
		return m.Item
	}
	return nil
}

func (x *CommitRequest_ContentSourceItem) GetUploader() *CommitRequest_UploaderSource {
	if x, ok := x.GetItem().(*CommitRequest_ContentSourceItem_Uploader); ok {
		return x.Uploader
	}
	return nil
}

func (x *CommitRequest_ContentSourceItem) GetObject() *CommitRequest_ObjectSource {
	if x, ok := x.GetItem().(*CommitRequest_ContentSourceItem_Object); ok {
		return x.Object
	}
	return nil
}

type isCommitRequest_ContentSourceItem_Item interface {
	isCommitRequest_ContentSourceItem_Item()
}

type CommitRequest_ContentSourceItem_Uploader struct {
	// get new content from the uploader
	Uploader *CommitRequest_UploaderSource `protobuf:"bytes,1,opt,name=uploader,proto3,oneof"`
}

type CommitRequest_ContentSourceItem_Object struct {
	// get new content from an existing object
	Object *CommitRequest_ObjectSource `protobuf:"bytes,2,opt,name=object,proto3,oneof"`
}

func (*CommitRequest_ContentSourceItem_Uploader) isCommitRequest_ContentSourceItem_Item() {}

func (*CommitRequest_ContentSourceItem_Object) isCommitRequest_ContentSourceItem_Item() {}

type CommitRequest_ObjectSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StorageRootId string `protobuf:"bytes,1,opt,name=storage_root_id,json=storageRootId,proto3" json:"storage_root_id,omitempty"`
	ObjectId      string `protobuf:"bytes,2,opt,name=object_id,json=objectId,proto3" json:"object_id,omitempty"`
}

func (x *CommitRequest_ObjectSource) Reset() {
	*x = CommitRequest_ObjectSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest_ObjectSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest_ObjectSource) ProtoMessage() {}

func (x *CommitRequest_ObjectSource) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest_ObjectSource.ProtoReflect.Descriptor instead.
func (*CommitRequest_ObjectSource) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{0, 2}
}

func (x *CommitRequest_ObjectSource) GetStorageRootId() string {
	if x != nil {
		return x.StorageRootId
	}
	return ""
}

func (x *CommitRequest_ObjectSource) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

type CommitRequest_UploaderSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploaderId string `protobuf:"bytes,1,opt,name=uploader_id,json=uploaderId,proto3" json:"uploader_id,omitempty"`
}

func (x *CommitRequest_UploaderSource) Reset() {
	*x = CommitRequest_UploaderSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommitRequest_UploaderSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitRequest_UploaderSource) ProtoMessage() {}

func (x *CommitRequest_UploaderSource) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitRequest_UploaderSource.ProtoReflect.Descriptor instead.
func (*CommitRequest_UploaderSource) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{0, 3}
}

func (x *CommitRequest_UploaderSource) GetUploaderId() string {
	if x != nil {
		return x.UploaderId
	}
	return ""
}

type GetUploaderResponse_Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// map of algorithm name to digest value for the upload
	Digests map[string]string `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// size of the upload in bytes
	Size int64 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
}

func (x *GetUploaderResponse_Upload) Reset() {
	*x = GetUploaderResponse_Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUploaderResponse_Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUploaderResponse_Upload) ProtoMessage() {}

func (x *GetUploaderResponse_Upload) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUploaderResponse_Upload.ProtoReflect.Descriptor instead.
func (*GetUploaderResponse_Upload) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{7, 0}
}

func (x *GetUploaderResponse_Upload) GetDigests() map[string]string {
	if x != nil {
		return x.Digests
	}
	return nil
}

func (x *GetUploaderResponse_Upload) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type ListUploadersResponse_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploaderId string `protobuf:"bytes,1,opt,name=uploader_id,json=uploaderId,proto3" json:"uploader_id,omitempty"`
	// creation date for the uploader
	Created *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	// optional description (may be empty)
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// user id for the uploader (may be empty)
	UserId string `protobuf:"bytes,4,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
}

func (x *ListUploadersResponse_Item) Reset() {
	*x = ListUploadersResponse_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chaparral_v1_commit_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUploadersResponse_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUploadersResponse_Item) ProtoMessage() {}

func (x *ListUploadersResponse_Item) ProtoReflect() protoreflect.Message {
	mi := &file_chaparral_v1_commit_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUploadersResponse_Item.ProtoReflect.Descriptor instead.
func (*ListUploadersResponse_Item) Descriptor() ([]byte, []int) {
	return file_chaparral_v1_commit_service_proto_rawDescGZIP(), []int{9, 0}
}

func (x *ListUploadersResponse_Item) GetUploaderId() string {
	if x != nil {
		return x.UploaderId
	}
	return ""
}

func (x *ListUploadersResponse_Item) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *ListUploadersResponse_Item) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ListUploadersResponse_Item) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

var File_chaparral_v1_commit_service_proto protoreflect.FileDescriptor

var file_chaparral_v1_commit_service_proto_rawDesc = []byte{
	0x0a, 0x21, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0c, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x1a, 0x17, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x2f,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdf, 0x05, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a,
	0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52,
	0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x61,
	0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3c,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x56, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x1a,
	0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0xa9, 0x01, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12,
	0x48, 0x0a, 0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x08, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x06, 0x6f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x70,
	0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x69, 0x74, 0x65, 0x6d, 0x1a, 0x53, 0x0a, 0x0c, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x1a, 0x31, 0x0a, 0x0e, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1f, 0x0a, 0x0b,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x10, 0x0a,
	0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x5a, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x63, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf5, 0x01, 0x0a, 0x13, 0x4e, 0x65, 0x77,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f,
	0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68,
	0x22, 0x35, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0xe5, 0x03, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x2b, 0x0a, 0x11, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72,
	0x69, 0x74, 0x68, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x10, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x73, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x61, 0x74, 0x68, 0x12,
	0x42, 0x0a, 0x07, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x07, 0x75, 0x70, 0x6c, 0x6f,
	0x61, 0x64, 0x73, 0x1a, 0xa9, 0x01, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f,
	0x0a, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x35, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x2e, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x73,
	0x69, 0x7a, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x44, 0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x16, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfa, 0x01, 0x0a, 0x15, 0x4c, 0x69, 0x73, 0x74,
	0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x46, 0x0a, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09,
	0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x1a, 0x98, 0x01, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x1f, 0x0a, 0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x07, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x38, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a,
	0x0b, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x49, 0x64, 0x22, 0x18,
	0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x96, 0x04, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x06, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x54, 0x0a, 0x0b, 0x4e, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x65, 0x77, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x54, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72,
	0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61,
	0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61,
	0x64, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5a, 0x0a,
	0x0d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x22,
	0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x0e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x12, 0x23, 0x2e, 0x63, 0x68,
	0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x24, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x21, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61,
	0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x63, 0x68,
	0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0xb5, 0x01, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72,
	0x72, 0x61, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3c, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x72, 0x65, 0x72, 0x69, 0x63, 0x6b,
	0x73, 0x6f, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2f, 0x67, 0x65,
	0x6e, 0x2f, 0x63, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2f, 0x76, 0x31, 0x3b, 0x63,
	0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x43, 0x58, 0x58,
	0xaa, 0x02, 0x0c, 0x43, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x2e, 0x56, 0x31, 0xca,
	0x02, 0x0c, 0x43, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0xe2, 0x02,
	0x18, 0x43, 0x68, 0x61, 0x70, 0x61, 0x72, 0x72, 0x61, 0x6c, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50,
	0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x0d, 0x43, 0x68, 0x61, 0x70,
	0x61, 0x72, 0x72, 0x61, 0x6c, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_chaparral_v1_commit_service_proto_rawDescOnce sync.Once
	file_chaparral_v1_commit_service_proto_rawDescData = file_chaparral_v1_commit_service_proto_rawDesc
)

func file_chaparral_v1_commit_service_proto_rawDescGZIP() []byte {
	file_chaparral_v1_commit_service_proto_rawDescOnce.Do(func() {
		file_chaparral_v1_commit_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_chaparral_v1_commit_service_proto_rawDescData)
	})
	return file_chaparral_v1_commit_service_proto_rawDescData
}

var file_chaparral_v1_commit_service_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_chaparral_v1_commit_service_proto_goTypes = []interface{}{
	(*CommitRequest)(nil),                   // 0: chaparral.v1.CommitRequest
	(*CommitResponse)(nil),                  // 1: chaparral.v1.CommitResponse
	(*DeleteObjectRequest)(nil),             // 2: chaparral.v1.DeleteObjectRequest
	(*DeleteObjectResponse)(nil),            // 3: chaparral.v1.DeleteObjectResponse
	(*NewUploaderRequest)(nil),              // 4: chaparral.v1.NewUploaderRequest
	(*NewUploaderResponse)(nil),             // 5: chaparral.v1.NewUploaderResponse
	(*GetUploaderRequest)(nil),              // 6: chaparral.v1.GetUploaderRequest
	(*GetUploaderResponse)(nil),             // 7: chaparral.v1.GetUploaderResponse
	(*ListUploadersRequest)(nil),            // 8: chaparral.v1.ListUploadersRequest
	(*ListUploadersResponse)(nil),           // 9: chaparral.v1.ListUploadersResponse
	(*DeleteUploaderRequest)(nil),           // 10: chaparral.v1.DeleteUploaderRequest
	(*DeleteUploaderResponse)(nil),          // 11: chaparral.v1.DeleteUploaderResponse
	nil,                                     // 12: chaparral.v1.CommitRequest.StateEntry
	(*CommitRequest_ContentSourceItem)(nil), // 13: chaparral.v1.CommitRequest.ContentSourceItem
	(*CommitRequest_ObjectSource)(nil),      // 14: chaparral.v1.CommitRequest.ObjectSource
	(*CommitRequest_UploaderSource)(nil),    // 15: chaparral.v1.CommitRequest.UploaderSource
	(*GetUploaderResponse_Upload)(nil),      // 16: chaparral.v1.GetUploaderResponse.Upload
	nil,                                     // 17: chaparral.v1.GetUploaderResponse.Upload.DigestsEntry
	(*ListUploadersResponse_Item)(nil),      // 18: chaparral.v1.ListUploadersResponse.Item
	(*User)(nil),                            // 19: chaparral.v1.User
	(*timestamppb.Timestamp)(nil),           // 20: google.protobuf.Timestamp
}
var file_chaparral_v1_commit_service_proto_depIdxs = []int32{
	19, // 0: chaparral.v1.CommitRequest.user:type_name -> chaparral.v1.User
	12, // 1: chaparral.v1.CommitRequest.state:type_name -> chaparral.v1.CommitRequest.StateEntry
	13, // 2: chaparral.v1.CommitRequest.content_sources:type_name -> chaparral.v1.CommitRequest.ContentSourceItem
	20, // 3: chaparral.v1.NewUploaderResponse.created:type_name -> google.protobuf.Timestamp
	20, // 4: chaparral.v1.GetUploaderResponse.created:type_name -> google.protobuf.Timestamp
	16, // 5: chaparral.v1.GetUploaderResponse.uploads:type_name -> chaparral.v1.GetUploaderResponse.Upload
	18, // 6: chaparral.v1.ListUploadersResponse.uploaders:type_name -> chaparral.v1.ListUploadersResponse.Item
	15, // 7: chaparral.v1.CommitRequest.ContentSourceItem.uploader:type_name -> chaparral.v1.CommitRequest.UploaderSource
	14, // 8: chaparral.v1.CommitRequest.ContentSourceItem.object:type_name -> chaparral.v1.CommitRequest.ObjectSource
	17, // 9: chaparral.v1.GetUploaderResponse.Upload.digests:type_name -> chaparral.v1.GetUploaderResponse.Upload.DigestsEntry
	20, // 10: chaparral.v1.ListUploadersResponse.Item.created:type_name -> google.protobuf.Timestamp
	0,  // 11: chaparral.v1.CommitService.Commit:input_type -> chaparral.v1.CommitRequest
	4,  // 12: chaparral.v1.CommitService.NewUploader:input_type -> chaparral.v1.NewUploaderRequest
	6,  // 13: chaparral.v1.CommitService.GetUploader:input_type -> chaparral.v1.GetUploaderRequest
	8,  // 14: chaparral.v1.CommitService.ListUploaders:input_type -> chaparral.v1.ListUploadersRequest
	10, // 15: chaparral.v1.CommitService.DeleteUploader:input_type -> chaparral.v1.DeleteUploaderRequest
	2,  // 16: chaparral.v1.CommitService.DeleteObject:input_type -> chaparral.v1.DeleteObjectRequest
	1,  // 17: chaparral.v1.CommitService.Commit:output_type -> chaparral.v1.CommitResponse
	5,  // 18: chaparral.v1.CommitService.NewUploader:output_type -> chaparral.v1.NewUploaderResponse
	7,  // 19: chaparral.v1.CommitService.GetUploader:output_type -> chaparral.v1.GetUploaderResponse
	9,  // 20: chaparral.v1.CommitService.ListUploaders:output_type -> chaparral.v1.ListUploadersResponse
	11, // 21: chaparral.v1.CommitService.DeleteUploader:output_type -> chaparral.v1.DeleteUploaderResponse
	3,  // 22: chaparral.v1.CommitService.DeleteObject:output_type -> chaparral.v1.DeleteObjectResponse
	17, // [17:23] is the sub-list for method output_type
	11, // [11:17] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_chaparral_v1_commit_service_proto_init() }
func file_chaparral_v1_commit_service_proto_init() {
	if File_chaparral_v1_commit_service_proto != nil {
		return
	}
	file_chaparral_v1_core_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chaparral_v1_commit_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteObjectResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUploaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewUploaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUploadersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUploadersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUploaderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUploaderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest_ContentSourceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest_ObjectSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommitRequest_UploaderSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUploaderResponse_Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chaparral_v1_commit_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUploadersResponse_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chaparral_v1_commit_service_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*CommitRequest_ContentSourceItem_Uploader)(nil),
		(*CommitRequest_ContentSourceItem_Object)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chaparral_v1_commit_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chaparral_v1_commit_service_proto_goTypes,
		DependencyIndexes: file_chaparral_v1_commit_service_proto_depIdxs,
		MessageInfos:      file_chaparral_v1_commit_service_proto_msgTypes,
	}.Build()
	File_chaparral_v1_commit_service_proto = out.File
	file_chaparral_v1_commit_service_proto_rawDesc = nil
	file_chaparral_v1_commit_service_proto_goTypes = nil
	file_chaparral_v1_commit_service_proto_depIdxs = nil
}

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chaparral/v1/admin_service.proto

package chaparralv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/srerickson/chaparral/gen/chaparral/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// AdminServiceName is the fully-qualified name of the AdminService service.
	AdminServiceName = "chaparral.v1.AdminService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// AdminServiceListStorageRootsProcedure is the fully-qualified name of the AdminService's
	// ListStorageRoots RPC.
	AdminServiceListStorageRootsProcedure = "/chaparral.v1.AdminService/ListStorageRoots"
	// AdminServiceScanObjectsProcedure is the fully-qualified name of the AdminService's ScanObjects
	// RPC.
	AdminServiceScanObjectsProcedure = "/chaparral.v1.AdminService/ScanObjects"
)

// AdminServiceClient is a client for the chaparral.v1.AdminService service.
type AdminServiceClient interface {
	// ListStorageRoots returns a list of the OCFL Storage Roots managed by the service
	ListStorageRoots(context.Context, *connect_go.Request[v1.ListStorageRootsRequest]) (*connect_go.Response[v1.ListStorageRootsResponse], error)
	// ScanObjects searches an OCFL storage root, returning a stream of object ids.
	ScanObjects(context.Context, *connect_go.Request[v1.ScanObjectsRequest]) (*connect_go.ServerStreamForClient[v1.ScanObjectsResponse], error)
}

// NewAdminServiceClient constructs a client for the chaparral.v1.AdminService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewAdminServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) AdminServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &adminServiceClient{
		listStorageRoots: connect_go.NewClient[v1.ListStorageRootsRequest, v1.ListStorageRootsResponse](
			httpClient,
			baseURL+AdminServiceListStorageRootsProcedure,
			opts...,
		),
		scanObjects: connect_go.NewClient[v1.ScanObjectsRequest, v1.ScanObjectsResponse](
			httpClient,
			baseURL+AdminServiceScanObjectsProcedure,
			opts...,
		),
	}
}

// adminServiceClient implements AdminServiceClient.
type adminServiceClient struct {
	listStorageRoots *connect_go.Client[v1.ListStorageRootsRequest, v1.ListStorageRootsResponse]
	scanObjects      *connect_go.Client[v1.ScanObjectsRequest, v1.ScanObjectsResponse]
}

// ListStorageRoots calls chaparral.v1.AdminService.ListStorageRoots.
func (c *adminServiceClient) ListStorageRoots(ctx context.Context, req *connect_go.Request[v1.ListStorageRootsRequest]) (*connect_go.Response[v1.ListStorageRootsResponse], error) {
	return c.listStorageRoots.CallUnary(ctx, req)
}

// ScanObjects calls chaparral.v1.AdminService.ScanObjects.
func (c *adminServiceClient) ScanObjects(ctx context.Context, req *connect_go.Request[v1.ScanObjectsRequest]) (*connect_go.ServerStreamForClient[v1.ScanObjectsResponse], error) {
	return c.scanObjects.CallServerStream(ctx, req)
}

// AdminServiceHandler is an implementation of the chaparral.v1.AdminService service.
type AdminServiceHandler interface {
	// ListStorageRoots returns a list of the OCFL Storage Roots managed by the service
	ListStorageRoots(context.Context, *connect_go.Request[v1.ListStorageRootsRequest]) (*connect_go.Response[v1.ListStorageRootsResponse], error)
	// ScanObjects searches an OCFL storage root, returning a stream of object ids.
	ScanObjects(context.Context, *connect_go.Request[v1.ScanObjectsRequest], *connect_go.ServerStream[v1.ScanObjectsResponse]) error
}

// NewAdminServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewAdminServiceHandler(svc AdminServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	adminServiceListStorageRootsHandler := connect_go.NewUnaryHandler(
		AdminServiceListStorageRootsProcedure,
		svc.ListStorageRoots,
		opts...,
	)
	adminServiceScanObjectsHandler := connect_go.NewServerStreamHandler(
		AdminServiceScanObjectsProcedure,
		svc.ScanObjects,
		opts...,
	)
	return "/chaparral.v1.AdminService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case AdminServiceListStorageRootsProcedure:
			adminServiceListStorageRootsHandler.ServeHTTP(w, r)
		case AdminServiceScanObjectsProcedure:
			adminServiceScanObjectsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedAdminServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedAdminServiceHandler struct{}

func (UnimplementedAdminServiceHandler) ListStorageRoots(context.Context, *connect_go.Request[v1.ListStorageRootsRequest]) (*connect_go.Response[v1.ListStorageRootsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.AdminService.ListStorageRoots is not implemented"))
}

func (UnimplementedAdminServiceHandler) ScanObjects(context.Context, *connect_go.Request[v1.ScanObjectsRequest], *connect_go.ServerStream[v1.ScanObjectsResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.AdminService.ScanObjects is not implemented"))
}

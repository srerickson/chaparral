// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chaparral/v1/management_service.proto

package chaparralv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/srerickson/chaparral/gen/chaparral/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// ManagementServiceName is the fully-qualified name of the ManagementService service.
	ManagementServiceName = "chaparral.v1.ManagementService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// ManagementServiceScanStorageRootProcedure is the fully-qualified name of the ManagementService's
	// ScanStorageRoot RPC.
	ManagementServiceScanStorageRootProcedure = "/chaparral.v1.ManagementService/ScanStorageRoot"
)

// ManagementServiceClient is a client for the chaparral.v1.ManagementService service.
type ManagementServiceClient interface {
	// ScanStorageRoot scans an OCFL storage root and streams discovered object
	// information to the caller.
	ScanStorageRoot(context.Context, *connect_go.Request[v1.ScanStorageRootRequest]) (*connect_go.ServerStreamForClient[v1.ScanStorageRootResponse], error)
}

// NewManagementServiceClient constructs a client for the chaparral.v1.ManagementService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewManagementServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) ManagementServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &managementServiceClient{
		scanStorageRoot: connect_go.NewClient[v1.ScanStorageRootRequest, v1.ScanStorageRootResponse](
			httpClient,
			baseURL+ManagementServiceScanStorageRootProcedure,
			opts...,
		),
	}
}

// managementServiceClient implements ManagementServiceClient.
type managementServiceClient struct {
	scanStorageRoot *connect_go.Client[v1.ScanStorageRootRequest, v1.ScanStorageRootResponse]
}

// ScanStorageRoot calls chaparral.v1.ManagementService.ScanStorageRoot.
func (c *managementServiceClient) ScanStorageRoot(ctx context.Context, req *connect_go.Request[v1.ScanStorageRootRequest]) (*connect_go.ServerStreamForClient[v1.ScanStorageRootResponse], error) {
	return c.scanStorageRoot.CallServerStream(ctx, req)
}

// ManagementServiceHandler is an implementation of the chaparral.v1.ManagementService service.
type ManagementServiceHandler interface {
	// ScanStorageRoot scans an OCFL storage root and streams discovered object
	// information to the caller.
	ScanStorageRoot(context.Context, *connect_go.Request[v1.ScanStorageRootRequest], *connect_go.ServerStream[v1.ScanStorageRootResponse]) error
}

// NewManagementServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewManagementServiceHandler(svc ManagementServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	managementServiceScanStorageRootHandler := connect_go.NewServerStreamHandler(
		ManagementServiceScanStorageRootProcedure,
		svc.ScanStorageRoot,
		opts...,
	)
	return "/chaparral.v1.ManagementService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case ManagementServiceScanStorageRootProcedure:
			managementServiceScanStorageRootHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedManagementServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedManagementServiceHandler struct{}

func (UnimplementedManagementServiceHandler) ScanStorageRoot(context.Context, *connect_go.Request[v1.ScanStorageRootRequest], *connect_go.ServerStream[v1.ScanStorageRootResponse]) error {
	return connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.ManagementService.ScanStorageRoot is not implemented"))
}

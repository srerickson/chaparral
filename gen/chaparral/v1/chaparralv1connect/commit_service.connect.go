// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: chaparral/v1/commit_service.proto

package chaparralv1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "github.com/srerickson/chaparral/gen/chaparral/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// CommitServiceName is the fully-qualified name of the CommitService service.
	CommitServiceName = "chaparral.v1.CommitService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CommitServiceCommitProcedure is the fully-qualified name of the CommitService's Commit RPC.
	CommitServiceCommitProcedure = "/chaparral.v1.CommitService/Commit"
	// CommitServiceNewUploaderProcedure is the fully-qualified name of the CommitService's NewUploader
	// RPC.
	CommitServiceNewUploaderProcedure = "/chaparral.v1.CommitService/NewUploader"
	// CommitServiceGetUploaderProcedure is the fully-qualified name of the CommitService's GetUploader
	// RPC.
	CommitServiceGetUploaderProcedure = "/chaparral.v1.CommitService/GetUploader"
	// CommitServiceListUploadersProcedure is the fully-qualified name of the CommitService's
	// ListUploaders RPC.
	CommitServiceListUploadersProcedure = "/chaparral.v1.CommitService/ListUploaders"
	// CommitServiceDeleteUploaderProcedure is the fully-qualified name of the CommitService's
	// DeleteUploader RPC.
	CommitServiceDeleteUploaderProcedure = "/chaparral.v1.CommitService/DeleteUploader"
	// CommitServiceDeleteObjectProcedure is the fully-qualified name of the CommitService's
	// DeleteObject RPC.
	CommitServiceDeleteObjectProcedure = "/chaparral.v1.CommitService/DeleteObject"
)

// CommitServiceClient is a client for the chaparral.v1.CommitService service.
type CommitServiceClient interface {
	// Commit creates or updates individual OCFL objects
	Commit(context.Context, *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error)
	// NewUploader creates a new uploader where content can be uploaded before
	// committing it to an object. Uploaders are associated with a specific
	// storage group.
	NewUploader(context.Context, *connect_go.Request[v1.NewUploaderRequest]) (*connect_go.Response[v1.NewUploaderResponse], error)
	// GetUploader returns details for a specific uploader
	GetUploader(context.Context, *connect_go.Request[v1.GetUploaderRequest]) (*connect_go.Response[v1.GetUploaderResponse], error)
	// ListUploaders returns a list of uploaders for a given storage group.
	ListUploaders(context.Context, *connect_go.Request[v1.ListUploadersRequest]) (*connect_go.Response[v1.ListUploadersResponse], error)
	// DeleteUploader deletes an uploader and files uploaded to it.
	DeleteUploader(context.Context, *connect_go.Request[v1.DeleteUploaderRequest]) (*connect_go.Response[v1.DeleteUploaderResponse], error)
	// DeleteObject permanently deletes an existing OCFL object.
	DeleteObject(context.Context, *connect_go.Request[v1.DeleteObjectRequest]) (*connect_go.Response[v1.DeleteObjectResponse], error)
}

// NewCommitServiceClient constructs a client for the chaparral.v1.CommitService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCommitServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) CommitServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &commitServiceClient{
		commit: connect_go.NewClient[v1.CommitRequest, v1.CommitResponse](
			httpClient,
			baseURL+CommitServiceCommitProcedure,
			opts...,
		),
		newUploader: connect_go.NewClient[v1.NewUploaderRequest, v1.NewUploaderResponse](
			httpClient,
			baseURL+CommitServiceNewUploaderProcedure,
			opts...,
		),
		getUploader: connect_go.NewClient[v1.GetUploaderRequest, v1.GetUploaderResponse](
			httpClient,
			baseURL+CommitServiceGetUploaderProcedure,
			opts...,
		),
		listUploaders: connect_go.NewClient[v1.ListUploadersRequest, v1.ListUploadersResponse](
			httpClient,
			baseURL+CommitServiceListUploadersProcedure,
			opts...,
		),
		deleteUploader: connect_go.NewClient[v1.DeleteUploaderRequest, v1.DeleteUploaderResponse](
			httpClient,
			baseURL+CommitServiceDeleteUploaderProcedure,
			opts...,
		),
		deleteObject: connect_go.NewClient[v1.DeleteObjectRequest, v1.DeleteObjectResponse](
			httpClient,
			baseURL+CommitServiceDeleteObjectProcedure,
			opts...,
		),
	}
}

// commitServiceClient implements CommitServiceClient.
type commitServiceClient struct {
	commit         *connect_go.Client[v1.CommitRequest, v1.CommitResponse]
	newUploader    *connect_go.Client[v1.NewUploaderRequest, v1.NewUploaderResponse]
	getUploader    *connect_go.Client[v1.GetUploaderRequest, v1.GetUploaderResponse]
	listUploaders  *connect_go.Client[v1.ListUploadersRequest, v1.ListUploadersResponse]
	deleteUploader *connect_go.Client[v1.DeleteUploaderRequest, v1.DeleteUploaderResponse]
	deleteObject   *connect_go.Client[v1.DeleteObjectRequest, v1.DeleteObjectResponse]
}

// Commit calls chaparral.v1.CommitService.Commit.
func (c *commitServiceClient) Commit(ctx context.Context, req *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error) {
	return c.commit.CallUnary(ctx, req)
}

// NewUploader calls chaparral.v1.CommitService.NewUploader.
func (c *commitServiceClient) NewUploader(ctx context.Context, req *connect_go.Request[v1.NewUploaderRequest]) (*connect_go.Response[v1.NewUploaderResponse], error) {
	return c.newUploader.CallUnary(ctx, req)
}

// GetUploader calls chaparral.v1.CommitService.GetUploader.
func (c *commitServiceClient) GetUploader(ctx context.Context, req *connect_go.Request[v1.GetUploaderRequest]) (*connect_go.Response[v1.GetUploaderResponse], error) {
	return c.getUploader.CallUnary(ctx, req)
}

// ListUploaders calls chaparral.v1.CommitService.ListUploaders.
func (c *commitServiceClient) ListUploaders(ctx context.Context, req *connect_go.Request[v1.ListUploadersRequest]) (*connect_go.Response[v1.ListUploadersResponse], error) {
	return c.listUploaders.CallUnary(ctx, req)
}

// DeleteUploader calls chaparral.v1.CommitService.DeleteUploader.
func (c *commitServiceClient) DeleteUploader(ctx context.Context, req *connect_go.Request[v1.DeleteUploaderRequest]) (*connect_go.Response[v1.DeleteUploaderResponse], error) {
	return c.deleteUploader.CallUnary(ctx, req)
}

// DeleteObject calls chaparral.v1.CommitService.DeleteObject.
func (c *commitServiceClient) DeleteObject(ctx context.Context, req *connect_go.Request[v1.DeleteObjectRequest]) (*connect_go.Response[v1.DeleteObjectResponse], error) {
	return c.deleteObject.CallUnary(ctx, req)
}

// CommitServiceHandler is an implementation of the chaparral.v1.CommitService service.
type CommitServiceHandler interface {
	// Commit creates or updates individual OCFL objects
	Commit(context.Context, *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error)
	// NewUploader creates a new uploader where content can be uploaded before
	// committing it to an object. Uploaders are associated with a specific
	// storage group.
	NewUploader(context.Context, *connect_go.Request[v1.NewUploaderRequest]) (*connect_go.Response[v1.NewUploaderResponse], error)
	// GetUploader returns details for a specific uploader
	GetUploader(context.Context, *connect_go.Request[v1.GetUploaderRequest]) (*connect_go.Response[v1.GetUploaderResponse], error)
	// ListUploaders returns a list of uploaders for a given storage group.
	ListUploaders(context.Context, *connect_go.Request[v1.ListUploadersRequest]) (*connect_go.Response[v1.ListUploadersResponse], error)
	// DeleteUploader deletes an uploader and files uploaded to it.
	DeleteUploader(context.Context, *connect_go.Request[v1.DeleteUploaderRequest]) (*connect_go.Response[v1.DeleteUploaderResponse], error)
	// DeleteObject permanently deletes an existing OCFL object.
	DeleteObject(context.Context, *connect_go.Request[v1.DeleteObjectRequest]) (*connect_go.Response[v1.DeleteObjectResponse], error)
}

// NewCommitServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCommitServiceHandler(svc CommitServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	commitServiceCommitHandler := connect_go.NewUnaryHandler(
		CommitServiceCommitProcedure,
		svc.Commit,
		opts...,
	)
	commitServiceNewUploaderHandler := connect_go.NewUnaryHandler(
		CommitServiceNewUploaderProcedure,
		svc.NewUploader,
		opts...,
	)
	commitServiceGetUploaderHandler := connect_go.NewUnaryHandler(
		CommitServiceGetUploaderProcedure,
		svc.GetUploader,
		opts...,
	)
	commitServiceListUploadersHandler := connect_go.NewUnaryHandler(
		CommitServiceListUploadersProcedure,
		svc.ListUploaders,
		opts...,
	)
	commitServiceDeleteUploaderHandler := connect_go.NewUnaryHandler(
		CommitServiceDeleteUploaderProcedure,
		svc.DeleteUploader,
		opts...,
	)
	commitServiceDeleteObjectHandler := connect_go.NewUnaryHandler(
		CommitServiceDeleteObjectProcedure,
		svc.DeleteObject,
		opts...,
	)
	return "/chaparral.v1.CommitService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CommitServiceCommitProcedure:
			commitServiceCommitHandler.ServeHTTP(w, r)
		case CommitServiceNewUploaderProcedure:
			commitServiceNewUploaderHandler.ServeHTTP(w, r)
		case CommitServiceGetUploaderProcedure:
			commitServiceGetUploaderHandler.ServeHTTP(w, r)
		case CommitServiceListUploadersProcedure:
			commitServiceListUploadersHandler.ServeHTTP(w, r)
		case CommitServiceDeleteUploaderProcedure:
			commitServiceDeleteUploaderHandler.ServeHTTP(w, r)
		case CommitServiceDeleteObjectProcedure:
			commitServiceDeleteObjectHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCommitServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCommitServiceHandler struct{}

func (UnimplementedCommitServiceHandler) Commit(context.Context, *connect_go.Request[v1.CommitRequest]) (*connect_go.Response[v1.CommitResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.CommitService.Commit is not implemented"))
}

func (UnimplementedCommitServiceHandler) NewUploader(context.Context, *connect_go.Request[v1.NewUploaderRequest]) (*connect_go.Response[v1.NewUploaderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.CommitService.NewUploader is not implemented"))
}

func (UnimplementedCommitServiceHandler) GetUploader(context.Context, *connect_go.Request[v1.GetUploaderRequest]) (*connect_go.Response[v1.GetUploaderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.CommitService.GetUploader is not implemented"))
}

func (UnimplementedCommitServiceHandler) ListUploaders(context.Context, *connect_go.Request[v1.ListUploadersRequest]) (*connect_go.Response[v1.ListUploadersResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.CommitService.ListUploaders is not implemented"))
}

func (UnimplementedCommitServiceHandler) DeleteUploader(context.Context, *connect_go.Request[v1.DeleteUploaderRequest]) (*connect_go.Response[v1.DeleteUploaderResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.CommitService.DeleteUploader is not implemented"))
}

func (UnimplementedCommitServiceHandler) DeleteObject(context.Context, *connect_go.Request[v1.DeleteObjectRequest]) (*connect_go.Response[v1.DeleteObjectResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("chaparral.v1.CommitService.DeleteObject is not implemented"))
}
